#!/bin/bash -eu
#
# Notes: Things to implement
#
# - [ ] Publish implementation
# - [ ] Utility language to expand time

if [[ -n "${TDX_DEBUG:-}" ]]; then
    set -x
fi

########################################################################
# Constants
########################################################################
CUR_DIR="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"
readonly CUR_DIR
readonly TDX_MDF="${TDX_MDF:-"$CUR_DIR/markdown_files/zig-out/lib/libmarkdown_files.so"}"
export BAT_THEME="${BAT_THEME:-base16}"
readonly BAT_THEME
export SELF="$0"

if [[ -z "${ZED_TERM:-}" ]]; then
    export FZF_DEFAULT_OPTS="--preview 'file=\$(echo {1}); [[ -f "\$file" ]] && bat --color=always --style=plain "\$file"' --preview-window 'bottom:border-sharp:wrap'"
fi

if [[ -n "${ZED_TERM:-}" ]]; then
    export EDITOR="zed";
fi

FZF_DEFAULT_OPTS="--header \"TERMinal inDEX | $(pwd) \$ tdx ${*}\" ${FZF_DEFAULT_OPTS:-}"
FZF_DEFAULT_OPTS="--header-first ${FZF_DEFAULT_OPTS:-}"
FZF_DEFAULT_OPTS="--layout reverse ${FZF_DEFAULT_OPTS:-}"


########################################################################
# Utilities
########################################################################
function err {
    echo -e "\033[91m $* \033[0m" >&2
}

function check_dep {
    if ! command -v "$1" &> /dev/null; then
	err "Couldn't find $1 in \$PATH: please make sure it's installed!"
	exit 1
    fi
}

function check_lib {
    if [[ ! -f "$1" ]]; then
	err "Couldn't find $1: please make sure it's available!"
	exit 1
    fi
}


########################################################################
# Implementation
########################################################################

function print_usage {
    echo "$(basename "${BASH_SOURCE[0]}") usage:"
    echo "  n, new [template=note,task,bookmark,reminder,pomodoro,*]"
    echo "  e, edit <path>"
    echo "  q, query [where clause]"
    echo "  j, journal"
    echo "  p, pomodoro"
    echo "  s, sql"
    echo "  b, board [group by] [filter]"
    echo "  t, tasks [collection]"
    echo "  w, week"
    exit 1
}

function new {
    local template="${1:-}"
    if [[ -n "$template" ]]; then
	shift
    fi

    local path
    path="$(date +%Y/%m/%d)"

    local filename
    filename="$(date +%s).md"

    mkdir -p "$path"
    local full_path="$path/$filename"

    case "$template" in
	n|note)
	    cat <<EOF >"$full_path"
---
title: ${1:-}
collection: ${2:-}
tags:
what: note
publish: true
---

EOF
	    ;;
	t|task)
	    cat <<EOF >"$full_path"
---
title: ${1:-}
collection: ${2:-}
tags:
what: task
when: someday    # today, tomorrow, week, month, quarter, someday
status:          # blocked, active, done
deadline:
---

EOF
	    ;;
	b|bookmark)
	    cat <<EOF >"$full_path"
---
title: ${1:-}
url: ${2:-}
collection: ${3:-}
tags:
what: bookmark
source:
publish: true
---

EOF
	    ;;
	r|reminder)
	    cat <<EOF >"$full_path"
---
title: ${1:-}
when: ${2:-}
collection: ${3:-}
what: reminder
---

EOF
	    ;;
	p|pomo|pomodoro)
	    cat <<EOF >"$full_path"
---
title: ${1:-}
collection: ${2:-}
what: pomodoro
---

EOF
	    ;;
	m|meeting)
	    cat <<EOF >"$full_path"
---
title: ${1:-}
collection: ${2:-}
what: meeting
---

EOF
	    ;;
	*)
	    cat <<EOF >"$full_path"
---
title: ${1:-}
collection: ${2:-}
tags:
what: $template
---

EOF
    esac
    "$EDITOR" "$full_path"

    if  [[ ! -s "$full_path" ]]; then
	rm "$full_path"
    fi
}

function query {
    local location
    location=$(pwd)

    local sql_query
    sql_query=$(cat <<EOF
SELECT
  substr(path, length('$location') + 2),
  ' #',
  mdf_front_matter(path, 'collection'),
  ' / ',
  mdf_front_matter(path, 'title'),
  ' (',
  mdf_front_matter(path, 'what'),
  ') ',
  mdf_front_matter(path, 'tags')
FROM
  markdown_files
WHERE
  path LIKE '%.md'
  AND path NOT LIKE '%.git'
  ${1:+AND $1}
ORDER BY
  mtime_s DESC,
  path ASC
EOF
	     );

    command=$(cat <<EOF
/usr/bin/env \
  sqlite3 -list -separator "" :memory: \
  ".load ${TDX_MDF%.so}" \
  "$sql_query"
EOF
	   );

    (
	export FZF_DEFAULT_COMMAND="$command";
	fzf --bind 'ctrl-r:reload(eval "$FZF_DEFAULT_COMMAND")' \
	    --bind 'enter:execute(eval "$SELF e {1}")+reload(eval "$FZF_DEFAULT_COMMAND")' \
	    --bind 'ctrl-n:execute(eval "$SELF n")' \
	    --info inline-right
    )

}

function edit {
    local path="$1"

    local parent_dir
    parent_dir="$(dirname "$path")"
    mkdir -p "$parent_dir"

    local final_path

    if [[ "$path" == *".md" ]]; then
	final_path="$path"
    else
	final_path="${path}.md"
    fi

    if [[ ! -f "$final_path" ]]; then
	cat <<EOF >"$final_path"
---
title:
---
EOF
    fi

    local rel_path
    rel_path="$(realpath -s --relative-to="$(pwd)" "$final_path")"
    local collection="${rel_path%.md}"

    local related
    related="$(mktemp "related-$(echo "$collection" | tr '/' '_')-XXX.md")"

    local query
    query="$(cat <<EOF
SELECT
  '=== '||path||' ===',
  mdf_contents(path) AS file
FROM
  markdown_files
WHERE
  basename LIKE '%.md'
  AND path NOT LIKE '%.git%'
  AND mdf_front_matter(path, 'collection') = '$collection'
ORDER BY
  mtime_s DESC,
  path ASC;
EOF
)"

    "$SELF" sql "-list" ".separator \n" "$query" \
	| tr -d '\r' > "$related";
    chmod -w "$related"

    if [[ ! -s "$related" ]]; then
	rm -f "$related"
	"$EDITOR" "$final_path"
    else
	"$EDITOR" "$final_path" "$related"
    fi

    if [[ ! -s "$final_path" ]]; then
	rm "$final_path"
    fi

    rm -f "$related"
}

function journal {
    local path
    path="$(date +%Y/%m/%d).md"

    local parent_dir
    parent_dir="$(dirname "$path")"
    mkdir -p "$parent_dir"

    if [[ ! -f "$path" ]]; then
	cat <<EOF >"$path"
---
title: $(date +%F)
---
EOF
    fi

    local related
    related="$(mktemp "related-$(date +%F)-XXX.md")"

    local location
    location=$(pwd)

    local query
    query="$(cat <<EOF
SELECT
  '=== '||path||' ===',
  mdf_contents(path) AS file
FROM
  markdown_files
WHERE
  basename LIKE '%.md'
  AND path NOT LIKE '%.git%'
  AND SUBSTR(path, length('$location') + 2) LIKE '${path%.md}%'
ORDER BY
  mdf_front_matter(path, 'what') ASC,
  mtime_s DESC,
  path ASC;
EOF
)"

    "$SELF" sql "-list" '.separator \n' "$query"

    "$EDITOR" "$path"

    if [[ ! -s "$path" ]]; then
	rm "$path"
    fi
}

function notify {
    local title="$1"
    local summary="$2"

    local ns
    ns=$(which notify-send)
    if (( $? != 0 )); then
	return
    fi

    "$ns" --app-name "tdx" \
	  -u "normal" \
	  --action="action1=Focus Window" \
	  "$title" \
	  "$summary"
}

function pomodoro {
    while true; do
	clear

	echo
	echo -e "  \033[32m.v,\033[0m"
	echo -e " \033[31m(\033[0m' \033[31m,)\033[0m"
	echo

	local location
	location=$(pwd)

	echo -e "\e[4mRecent pomodoros:\e[0m"
	local sql_query
	sql_query=$(cat <<EOF
SELECT
  substr(path, length('$location') + 2), ' / ',
  mdf_front_matter(path, 'title'), ' #',
  mdf_front_matter(path, 'collection')
FROM
  markdown_files
WHERE
  path LIKE '%.md'
  AND path NOT LIKE '%.git'
  AND mdf_front_matter(path, 'what') = 'pomodoro'
ORDER BY
   mtime_s DESC,
   path ASC
LIMIT 10
EOF
		 );
	/usr/bin/env \
	    sqlite3 -list -separator "" :memory: \
	    ".load ${TDX_MDF%.so}" \
	    "$sql_query"
	echo

	echo -ne "\033[4mPomodoro goal?\033[0m\n"
	local purpose
	read -e -r purpose

	local collection
	echo -ne "\033[4mAdd to collection?\033[0m\n"
	read -e -r collection

	local end_time
	end_time="$(date -d "+25 minutes")"

	local end_timestamp
	end_timestamp="$(date -d "$end_time" +%s)"

	echo -e "\n> Pomodoro will end at ${end_time}"
	echo -n "> "
	while (( $(date +%s) < end_timestamp )); do
	    sleep 60
	    echo -n "."
	done
	echo -e '\a'
	notify "Pomodoro finished!" "${collection+$collection\n}$purpose"

	$SELF new pomodoro "$purpose" "$collection"
	echo -e "> Recorded.\n"

	end_time="$(date -d "+5 minutes")"
	end_timestamp="$(date -d "$end_time" +%s)"
	echo "> Break will end at ${end_time}"
	echo -n "> "
	while (( $(date +%s) < end_timestamp )); do
	    sleep 60
	    echo -n "."
	done
	echo -e "\a\n\n"
	notify "Break finished!" "$(date)"
    done
}

function sql {
    exec /usr/bin/env sqlite3 :memory: -cmd ".load ${TDX_MDF%.so}" "$@"
}

function board {
    local group_by="${1:-when}"
    local query
    query=$(cat <<EOF
SELECT
  DISTINCT(coalesce(mdf_front_matter(path, '$group_by'), 'null'))
FROM
  markdown_files
WHERE
  (
    mdf_front_matter(path, 'status') != 'done'
    OR mdf_front_matter(path, 'status') IS NULL
  )
  ${2:+AND $2}
GROUP BY 1
ORDER BY COUNT(1) DESC
EOF
	 )
    local vals
    vals="$("$SELF" sql "-list" "$query")"

    for val in $vals; do
	echo -e "=== ${val} ==="
	"$SELF" sql "-list" ".separator ' '" "SELECT path, mdf_front_matter(path, 'title'), mdf_front_matter(path, 'collection'), mdf_front_matter(path, 'tags') FROM markdown_files WHERE mdf_front_matter(path, '$group_by') = '$val' AND basename LIKE '%.md' AND path NOT LIKE '%.git%' ${2:+AND $2} ORDER BY mtime_s DESC"
	echo
    done |\
	fzf --bind 'enter:execute(eval "$SELF e {1}")+become(eval "$SELF b $group_by")' \
	    --info inline-right
}

function tasks {
    local collection="${1:-}"
    local whens=(today week month quarter half year someday unset)

    local location
    location=$(pwd)

    for when in "${whens[@]}"; do
	local group_query
	group_query="$(cat <<EOF
SELECT
  printf('%-28s', substr(path, length('$location') + 2)),
  printf('#%-20s', substr(mdf_front_matter(path, 'collection'), length('projects/'))),
  printf('@%-10s', mdf_front_matter(path, 'status')),
  mdf_front_matter(path, 'title'),
  mdf_front_matter(path, 'tags')
FROM markdown_files
WHERE
  mdf_front_matter(path, 'when') = '$when'
  AND basename LIKE '%.md'
  AND path NOT LIKE '%.git%'
  AND COALESCE(mdf_front_matter(path, 'status'), 'unset') != 'done'
  ${1:+AND coalesce(mdf_front_matter(path, 'collection'), 'unset') LIKE '$collection%'}
ORDER BY
  mtime_s DESC
EOF
	)";
	printf "=== %-72s ===\n" "$when"
	"$SELF" sql "-list" ".separator ' '" "$group_query"
	echo
    done |\
	fzf --bind "enter:become(eval \"$SELF e {1} && $SELF t $collection\")" \
	    --bind "ctrl-n:become(eval \"$SELF n t '' $collection && $SELF t $collection\")" \
	    --info inline-right

    # TODO show uncategorized
    #    local query
    #    query=$(cat <<EOF
    #SELECT
    #  DISTINCT(
    #    CASE
    #      WHEN mdf_front_matter(path, 'when') IS NULL OR mdf_front_matter(path, 'when') = ''
    #      THEN 'unset'
    #      ELSE mdf_front_matter(path, 'when')
    #    END
    #  )
    #FROM
    #  markdown_files
    #WHERE
    #  COALESCE(mdf_front_matter(path, 'status'), 'unset') != 'done'
    #GROUP BY 1
    #ORDER BY COUNT(1) DESC
    #EOF
    #)
    #    local vals
    #    vals="$("$SELF" sql "-list" "$query")"
    #    echo "$vals"
}

function week {
    local start_time end_time location
    start_time=$(date -d "last sunday" +%s)
    end_time=$(date -d "sunday" +%s)
    location=$(pwd)

    query="$(cat <<EOF
SELECT
  printf('%-80s', substr(path, length('$location') + 2)),
  printf('%s%s', char(10), mdf_contents(path))
FROM markdown_files
WHERE
  mtime_s >= $start_time AND mtime_s <= $end_time
  AND basename LIKE '%.md'
  AND path NOT LIKE '%.git%'
ORDER BY
  ctime_s DESC,
  mtime_s DESC
EOF
)";

    exec /usr/bin/env sqlite3 :memory: -list -cmd ".load ${TDX_MDF%.so}" "$query"
}

function main {
    check_dep fzf
    check_dep sqlite3
    check_dep bat
    check_lib "$TDX_MDF"

    if (( $# < 1 )); then
	print_usage
    fi

    local basecmd="${1:-}"
    shift

    case "$basecmd" in
	n|new)
	    new "$@"
	    ;;
	e|edit)
	    edit "$@"
	    ;;
	j|journal)
	    journal "$@"
	    ;;
	q|query)
	    query "$@"
	    ;;
	p|pomo|pomodoro)
	    pomodoro "$@"
	    ;;
	s|sql)
	    sql "$@"
	    ;;
	b|board)
	    board "$@"
	    ;;
	t|tasks)
	    tasks "$@"
	    ;;
	w|week)
	    week "$@"
	    ;;
	*)
	    print_usage
    esac
}


main "$@"
